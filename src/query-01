from azure.identity import ClientSecretCredential
from azure.monitor.query import LogsQueryClient
from azure.mgmt.loganalytics import LogAnalyticsManagementClient 
from datetime import datetime, timedelta
import urllib3
import requests

def get_token(tenant, sp_id, sp_secret):
    """Obtain authentication token using a Service Principal"""
    login_url = "https://login.microsoftonline.com/"+ tenant +"/oauth2/token"
    resource = "https://api.loganalytics.io"

    payload = {
        'grant_type': 'client_credentials',
        'client_id': sp_id,
        'client_secret': sp_secret,
        'Content-Type': 'x-www-form-urlencoded',
        'resource': resource
    }
    try:
        response = requests.post(login_url, data=payload, verify=False)
    except Exception as error:
        return error(error)
    
    if (response.status_code >= 200 and response.status_code <= 299):
        token = json.loads(response.content)["access_token"]
        return {"Authorization": str("Bearer "+ token), 'Content-Type': 'application/json'}
    else:
        return format(response.status_code)


def handler(event, context):
    credentials, subscription_id = get_credentials(event)
    resource_group = event['environment_params']['resource_group']
    client = LogsQueryClient(credentials)
    la_client = LogAnalyticsManagementClient(credentials, subscription_id)

    try:
        #something
        # d_date = datetime.now()
        # N = 1
        # date_N_days_ago = d_date - timedelta(days=N)
        query = """LAQueryLogs"""
        la_client_res = list(la_client.workspaces.list_by_resource_group(resource_group))
        log_token = get_token(credentials._tenant_id, credentials._client_id, credentials._client_credential)
        if any(la_client_res) and la_client_res:
            az_url = "https://api.loganalytics.io/v1/workspaces/"+ la_client_res[0].customer_id + "/query?query="
            query_result = requests.get(az_url, params=query, headers=log_token)
            # results = client.query_workspace(la_client_res[0].customer_id, query, timespan=(date_N_days_ago, d_date))
            return True
    except:
        return False

def get_credentials(event):
    subscription_id = event['environment_params']['subscription_id']
    credentials = ClientSecretCredential(
        client_id=event['credentials']['credential_id'],
        client_secret=event['credentials']['credential_key'],
        tenant_id=event['environment_params']['tenant']
    )
    return credentials, subscription_id
